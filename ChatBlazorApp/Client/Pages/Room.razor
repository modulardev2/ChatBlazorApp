@page "/{RoomName}"
@using Microsoft.AspNetCore.SignalR.Client
@using ChatBlazorApp.Shared
@inject NavigationManager NavigationManager
@implements IDisposable
@inject HttpClient Http

<div class="form-group">
	<label>
		User:
		<input @bind="userInput" />
	</label>
</div>
<div class="form-group">
	<label>
		Message:
		<input @bind="messageInput" size="50" />
	</label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
	@foreach (var message in messages)
	{
		<li>@message</li>
	}
</ul>

@code {
	[Parameter] public string RoomName { get; set; }
	private HubConnection hubConnection;
	private List<string> messages = new List<string>();
	private string userInput;
	private string messageInput;

	protected override async Task OnParametersSetAsync()
	{
		messages.Clear();
		userInput = "";
		messageInput = "";

		hubConnection = new HubConnectionBuilder()
			.WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
			.Build();

		hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
		{
			var encodedMsg = $"{user}: {message}";
			messages.Add(encodedMsg);
			StateHasChanged();
		});

		await hubConnection.StartAsync();

		await hubConnection.SendAsync("JoinRoom", RoomName);

		var previousChats = await Http.GetFromJsonAsync<ChatData[]>($"Chat/{RoomName}");

		if (previousChats != null)
		{
			foreach (var previousChat in previousChats)
			{
				var encodedMsg = $"{previousChat.User}: {previousChat.Message}";
				messages.Add(encodedMsg);
			}
		}
	}

	Task Send() =>
		hubConnection.SendAsync("SendMessage", userInput, messageInput, RoomName);

	public bool IsConnected =>
		hubConnection.State == HubConnectionState.Connected;

	public void Dispose()
	{
		_ = hubConnection.DisposeAsync();
	}
}